{"version":3,"sources":["components/PageTemplate/PageTemplate.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","PageTemplate","children","className","TodoInput","value","onChange","onInsert","onKeyPress","e","key","onClick","TodoItem","nextProps","nextState","this","props","done","onToggle","onRemove","type","checked","readOnly","stopPropagation","Component","TodoList","todos","todoList","map","todo","id","text","App","state","input","getId","handleChange","setState","target","handleInsert","newTodo","handleToggle","index","findIndex","toggled","slice","length","handleRemove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d774bdb.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './PageTemplate.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n// classnames로 styles 바인딩, styles.page-template -> page-template로 작성 가능\r\n// yarn add classnames\r\nconst cx = classNames.bind(styles);\r\n\r\n/*\r\n함수형 컴포넌트, children은 App.js에서 PageTmplate 컴포넌트 안에\r\n컴포넌트들을 의미\r\n*/\r\nconst PageTemplate = ({children}) => {\r\n    return(\r\n        <div className={cx('page-template')}>\r\n            <h1>Todo List</h1>\r\n            <div className={cx('content')}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageTemplate;","import React from 'react';\r\nimport styles from './TodoInput.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n/*\r\n    value = 입력 값\r\n    onChange = input 변경 이벤트\r\n    onInsert = 추가 버튼 클릭 이벤트\r\n    비구조화 할당 방식의 함수형 컴포넌트\r\n\r\n    원래는 const TodoInput = ({props}) =>{} 이런식이라면, 아래에서 props.onChange props.value\r\n    이런 형태로 되어야 함.\r\n*/ \r\nconst TodoInput = ({value, onChange, onInsert}) =>{\r\n\r\n    const handleKeyPress = (e) =>{\r\n        if(e.key === 'Enter'){\r\n            onInsert();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={cx('todo-input')}>\r\n            <input onChange={onChange} value={value} onKeyPress={handleKeyPress}/>\r\n            <div className={cx('add-button')} onClick={onInsert}>추가</div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default TodoInput;","import React, { Component, children } from 'react';\r\nimport styles from './TodoItem.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass TodoItem extends Component{\r\n    // 성능 최적화\r\n    // done값 변경이 없으면 false값 반환해서 리렌더링 방지함.\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.done !== nextProps.done;\r\n    }\r\n    render(){\r\n        /*비구조화 할당 문법, 이 컴포넌트가 어떤 props를 사용하는지 쉽게 파악,\r\n          this.props 생략 가능*/\r\n        const {done, children, onToggle, onRemove} = this.props;\r\n\r\n        return(\r\n            <div className={cx('todo-item')} onClick={onToggle}>\r\n                <input className={cx('tick')} type=\"checkbox\" checked={done} readOnly />\r\n                <div className={cx('text', {done})}> {children} </div>\r\n                <div className={cx('delete')} onClick={(e) => { \r\n                    onRemove();\r\n                    e.stopPropagation(); \r\n                    /*자식요소에 onClick 이벤트가 존재하고, 부모 div에서도 onClick 이벤트 존재시\r\n                      자식(onRemove) -> 부모(onToggle) 순으로 메서드 실행함. 이를 propagation이라함. 따라서 제대로 삭제가 되지않음\r\n                      이를 방지하기위해 onClick 처리함수 내부에서 e.stopPropagation 호출함.*/\r\n                }}> 삭제 </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\n\r\nclass TodoList extends Component{\r\n    // 성능 최적화, todos props가 바뀔때만 리렌더링 되도록\r\n    // todos값 변경이 없으면 false값 반환해서 리렌더링 방지함.\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render(){\r\n        const {todos, onToggle, onRemove} = this.props;\r\n        const todoList = todos.map(\r\n            todo =>(\r\n                <TodoItem \r\n                key={todo.id} \r\n                done={todo.done} \r\n                onToggle={()=> onToggle(todo.id)}\r\n                onRemove={() => onRemove(todo.id)}>\r\n                    {todo.text}\r\n                </TodoItem>\r\n            )\r\n        );\r\n\r\n        return(\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, {Component} from 'react';\r\nimport PageTemplate from './PageTemplate/PageTemplate';\r\nimport TodoInput from './TodoInput/TodoInput';\r\nimport TodoList from './TodoList/TodoList';\r\n\r\nclass App extends Component{\r\n    state = {\r\n        input: '' ,// input 값\r\n        todos: [\r\n        ]\r\n    }\r\n\r\n    id = -1\r\n    //id 값 반환\r\n    getId = () =>{\r\n        return ++this.id;\r\n    }\r\n\r\n    // input에 입력한 값을 state의 input에 넣어줌\r\n    handleChange= (e) =>{\r\n        this.setState({\r\n            input: e.target.value\r\n        });\r\n    }\r\n\r\n    // 일정 추가 함수\r\n    handleInsert = () =>{\r\n        const {todos, input} = this.state;\r\n\r\n        //새 데이터 객체 생성\r\n        const newTodo = {\r\n            text : input,\r\n            done : false,\r\n            id: this.getId()\r\n        };\r\n\r\n        // 배열에 새 데이터 객체 추가, 전개연산자 사용\r\n        this.setState({\r\n            todos: [...todos, newTodo],\r\n            input:'' // 추가후에는 input 초기화\r\n        });\r\n    }\r\n\r\n    /* \r\n    Item 클릭시 활성화 비활성화, id로 배열 인덱스 찾음\r\n    findIndex 함수는 특정요소가 배열에서 몇번째 요소인지 찾기 위한 함수\r\n    매개변수에는 콜백함수이며, true값 반환할때가지 0부터 순차탐색함\r\n    true 값 반환시 순차탐색 중지하고 해당 요소의 인덱스 반환 \r\n    */\r\n    handleToggle = (id) =>{\r\n        const {todos} = this.state;\r\n        const index = todos.findIndex(todo => todo.id === id);\r\n\r\n        // 찾은 id값을 가진 데이터의 done값을 반전,\r\n        // setState에서 배열 새롭게 생성 시 값 유지 위함\r\n        const toggled = {\r\n            ...todos[index],\r\n            done: !todos[index].done\r\n        };\r\n\r\n        // slice로 index값 전후 데이터 복사\r\n        // 그리고 그 사이에 변경된 todo(toggled) 객체 넣어줌\r\n        this.setState({\r\n            todos: [\r\n                ...todos.slice(0,index),\r\n                toggled,\r\n                ...todos.slice(index+1, todos.length)\r\n            ]\r\n        });\r\n    }\r\n\r\n    // 삭제 함수\r\n    handleRemove = (id) =>{\r\n        const {todos} = this.state;\r\n        const index = todos.findIndex(todo => todo.id === id);\r\n\r\n        this.setState({\r\n            todos:[\r\n                ...todos.slice(0,index),\r\n                ...todos.slice(index+1, todos.length)\r\n            ]\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const {input, todos} = this.state; // 비구조화 할당\r\n        const {handleChange, handleInsert, handleToggle, handleRemove} = this; // 비구조화 할당으로 this.handleChange 에서 this 생략 가능\r\n        return(\r\n            <PageTemplate>\r\n                <TodoInput onChange={handleChange} onInsert={handleInsert} value={input}/>\r\n                <TodoList todos={todos} onToggle={handleToggle} onRemove = {handleRemove}/>\r\n            </PageTemplate>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}